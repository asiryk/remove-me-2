

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texcoord;
uniform mat4 ModelViewProjectionMatrix, normalMat;
uniform float shininess;
uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec2 texScale;

varying vec2 vTexcoord;
varying vec4 color;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normalInterp = vec3(normalMat * vec4(vertex, 0.0));
    gl_Position = vertPos4;
    vec3 normal = normalize(normalInterp);
    vec3 lightDirection = normalize(lightPosition - vertPos);

    //ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    //diffuse
    float diff = max(dot(normal, lightDirection), 0.0);
    vec3 diffuse = diff * lightColor;

    //specular
    float specularStrength = 0.5;
    vec3 reflectDir = reflect(-lightDirection, normal);
    float spec = pow(max(dot(lightDirection, reflectDir), 0.0), 32.0);
    vec3 specular = specularStrength * spec * lightColor;

    color = vec4(diffuse + ambient + specular, 1.0);
    vTexcoord = texcoord;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform sampler2D uTexture;

varying vec4 color;
varying vec2 vTexcoord;

void main() {
    vec4 texture = texture2D(uTexture, vTexcoord);
    vec4 white = vec4(1., 1., 1., 1.);
    gl_FragColor = texture * white;
}`;
