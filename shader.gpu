

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texcoord;
uniform mat4 ModelViewProjectionMatrix, normalMat;
uniform float shininess;
uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec2 texScale;
uniform vec2 texCenter;

varying vec2 vTexcoord;
varying vec4 color;

mat4 translateMat(vec3 v) {
  return mat4(
    vec4(1.0, 0.0, 0.0, v.x),
    vec4(0.0, 1.0, 0.0, v.y),
    vec4(0.0, 0.0, 1.0, v.z),
    vec4(0.0, 0.0, 0.0, 1.0)
  );
}

mat4 scaleMatrix(vec3 v) {
  return mat4(
    vec4(v.x, 0.0, 0.0, 0.0),
    vec4(0.0, v.y, 0.0, 0.0),
    vec4(0.0, 0.0, v.z, 0.0),
    vec4(0.0, 0.0, 0.0, 1.0)
  );
}

vec2 scaleWithPoint(vec2 point, vec2 pivot, vec2 scale) {
    mat4 tran = translateMat(vec3(pivot, 0.));
    mat4 scaleMat = scaleMatrix(vec3(scale, 0.));
    mat4 tranBack = translateMat(-vec3(pivot, 0.));


    vec4 point4 = vec4(point, 0., 0.);

    vec4 tr = tran * point4;
    vec4 sc = tr * scaleMat;
    vec4 trb = sc * tranBack;

    return vec2(trb);
}

vec3 calc_light(vec3 lightColor, vec3 normal, vec3 lightDirection) {
    float strength = 0.8;

    float maxND = max(dot(normal, lightDirection), 0.0);
    vec3 refD = reflect(-lightDirection, normal);
    float sp = pow(max(dot(lightDirection, refD), 0.0), 32.);

    return strength * lightColor + maxND * lightColor + strength * sp * lightColor;
}


void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normalInterp = vec3(normalMat * vec4(vertex, 0.0));
    gl_Position = vertPos4;
    vec3 lightDirection = normalize(lightPosition - vertPos);

    vec3 calculated_light = calc_light(lightColor, normalize(normalInterp), lightDirection);

    color = vec4(calculated_light, 1.);
    vTexcoord = scaleWithPoint(texcoord, texCenter, texScale);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform sampler2D uTexture;

varying vec4 color;
varying vec2 vTexcoord;

void main() {
    vec4 texture = texture2D(uTexture, vTexcoord);
    gl_FragColor = texture;
}`;
